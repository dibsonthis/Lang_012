#pragma once
#include <vector>
#include <iostream>
#include <unordered_map>

enum Type
{
	TYPE_EMPTY,
	TYPE_EOF,
	TYPE_ERROR,
	TYPE_ID,
	TYPE_INT,
	TYPE_FLOAT,
	TYPE_STRING,
	TYPE_EQUAL,
	TYPE_LPAREN,
	TYPE_RPAREN,
	TYPE_LBRACE,
	TYPE_RBRACE,
	TYPE_LBRACKET,
	TYPE_RBRACKET,
	TYPE_LANGLE,
	TYPE_RANGLE,
	TYPE_DOT,
	TYPE_BACKSLASH,
	TYPE_APOSTROPHE,
	TYPE_EXCLAMATION,
	TYPE_AT,
	TYPE_HASH,
	TYPE_DOLLAR,
	TYPE_CARET,
	TYPE_B_AND,
	TYPE_B_OR,
	TYPE_QUESTION,
	TYPE_PERCENT,
	TYPE_DOUBLE_QUOTE,
	TYPE_MINUS,
	TYPE_PLUS,
	TYPE_SLASH,
	TYPE_STAR,
	TYPE_COMMA,
	TYPE_COLON,
	TYPE_SEMICOLON,
	TYPE_NEG,
	TYPE_POS,

	TYPE_EQ_EQ,
	TYPE_PLUS_EQ,
	TYPE_MINUS_EQ,
	TYPE_PLUS_PLUS,
	TYPE_MINUS_MINUS,
	TYPE_LT_EQUAL,
	TYPE_GT_EQUAL,
	TYPE_NOT_EQUAL,
	TYPE_DOUBLE_COLON,
	TYPE_RIGHT_ARROW,
	TYPE_RIGHT_ARROW_SINGLE,
	TYPE_AND,
	TYPE_OR,

	// Language Specific Types

	TYPE_RAW_EXPR,
	TYPE_PAREN_EXPR,
	TYPE_CALL,
	TYPE_END_OF_EXPRESSON,
	TYPE_BLOCK,
	TYPE_IF,
	TYPE_ELSE,
	TYPE_IF_ELSE_STATEMENT,
	TYPE_WHILE,
	TYPE_TYPE,
	TYPE_TYPE_DEF,
	TYPE_FUNC_DEF,
	TYPE_RETURN,
	TYPE_LIST,
	TYPE_RANGE,
	TYPE_BOOL,
	TYPE_REF,
	TYPE_EQ_AND,
	TYPE_SCOPE,
	TYPE_VAR,
	TYPE_BREAK,
	TYPE_BREAK_ALL
};

std::string type_repr(Type type);